name: factory
description: Creates a new template-based factory definition with strict parameter validation. Parameters must be primitive data, not code syntax. Use separate arrays for names and types.
spec:
  description: |
    Meta-factory for creating new factory definitions.
    Generates .codefactory files with YAML frontmatter and Handlebars templates.
  aiGuidance: |
    When creating factories:
    1. Ask for spec field content (inline, file refs, or web URLs)
    2. Include spec in the generated factory for AI context
    3. Spec should describe WHAT to generate, not HOW
    4. Encourage file references for complex specifications
params:
  name:
    type: string
    description: Unique name for the factory (e.g., 'react_component')
    required: true
  description:
    type: string
    description: Human-readable description of what the factory does
    required: true
  template:
    type: string
    description: Code template with {{variable}} placeholders that will be replaced with parameter values
    required: true
  outputPath:
    type: string
    description: Optional file path template (e.g., 'src/{{componentName}}.ts'). Can use same {{variables}} as template.
    required: false
  paramDescriptions:
    type: Record<string, string>
    description: Object mapping parameter names to their descriptions. Template variables are auto-detected.
    required: false
  spec:
    type: string
    description: Specification field - can be inline text, file path, or structured spec with references. This is the FIRST thing AI should consider when creating instances.
    required: false
outputPath: factories/{{name}}.codefactory
examples:
  - name: typescript_getter
    description: Creates a TypeScript getter function with optional validation
    template: |
      export function get{{propertyName}}(): {{returnType}} {
        {{#if validateInput}}
        if (!this._{{propertyName}}) {
          throw new Error("{{propertyName}} not initialized");
        }
        {{/if}}
        return this._{{propertyName}};
      }
    outputPath: src/getters/get{{propertyName}}.ts
    paramDescriptions:
      propertyName: Name of the property (e.g., 'userName')
      returnType: Return type (e.g., 'string', 'number', 'User')
      validateInput: Whether to add null-check validation
  - name: web_component
    description: Creates a web component with proper parameter separation
    template: |
      class {{componentName}} extends HTMLElement {
      {{#each propNames}}
        {{this}}: {{lookup ../propTypes @index}};
      {{/each}}
      
      {{#each signalNames}}
        {{this}} = signal<{{lookup ../signalTypes @index}}>({{lookup ../signalDefaults @index}});
      {{/each}}
      }
      {{componentName}}.define('{{tagName}}');
    outputPath: src/components/{{componentName}}.ts
    paramDescriptions:
      componentName: Name of the component class
      tagName: Custom element tag name
      propNames: Array of prop names only (use separate arrays)
      propTypes: Array of prop types only (separate from names)
      signalNames: Array of signal names only
      signalTypes: Array of signal types only
      signalDefaults: Array of signal defaults only
  - name: interface_definition
    description: Creates a TypeScript interface with separated field definitions
    template: |
      export interface {{interfaceName}} {
      {{#each fieldNames}}
        {{this}}: {{lookup ../fieldTypes @index}};
      {{/each}}
      }
    outputPath: src/types/{{interfaceName}}.ts
    paramDescriptions:
      interfaceName: Name of the interface
      fieldNames: Array of field names only (e.g., ["id", "name"])
      fieldTypes: Array of field types only (e.g., ["string", "string"])

template: |
  name: {{name}}
  description: {{description}}
  {{#if spec}}
  spec: {{{spec}}}
  {{/if}}
  {{#if outputPath}}
  outputPath: {{{outputPath}}}
  {{/if}}
  {{#if params}}
  params:
  {{#each params}}
    {{@key}}:
      type: string
      description: {{{this.description}}}
      required: {{this.required}}
  {{/each}}
  {{/if}}
  
  template: |
    {{{template}}}
